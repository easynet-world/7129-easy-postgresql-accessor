name: PostgreSQL Data Accessor CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

# This workflow automatically bumps the package version on each push to master
# Starting from version 0.0.1, it will automatically increment the patch version
# Version progression: 0.0.1 -> 0.0.2 -> 0.0.3 -> ... -> 0.1.0 -> 0.1.1 -> ...

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: npm install
    
    - name: Run tests
      run: npm test
    
    - name: Generate coverage report
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    # This job handles automatic version bumping and publishing
    # It will start from 0.0.1 and automatically increment the patch version
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm install
    
    - name: Build package
      run: npm run build
    
    - name: Show current package version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "::notice::Current package.json version: $CURRENT_VERSION"
        echo "::notice::This will be the starting point for version bumping"
        echo "::notice::Version progression will be: $CURRENT_VERSION -> 0.0.2 -> 0.0.3 -> ..."
        echo "::notice::Each push to master will automatically increment the patch version"
        echo "::notice::This ensures consistent version progression starting from 0.0.1"
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Get latest version from npm or use package.json
      id: get-latest
      run: |
        # Try to get the latest version from npm, fallback to package.json if package doesn't exist
        if npm view postgresql-data-accessor version > /dev/null 2>&1; then
          LATEST_VERSION=$(npm view postgresql-data-accessor version)
          echo "Latest version on npm: $LATEST_VERSION"
          echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "source=npm" >> $GITHUB_OUTPUT
        else
          # Package doesn't exist on npm, use current package.json version
          LATEST_VERSION=$(node -p "require('./package.json').version")
          echo "Package not found on npm, using package.json version: $LATEST_VERSION"
          echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "source=package" >> $GITHUB_OUTPUT
        fi
    
    - name: Bump patch version from latest
      run: |
        LATEST_VERSION=${{ steps.get-latest.outputs.latest }}
        SOURCE=${{ steps.get-latest.outputs.source }}
        echo "Bumping from version: $LATEST_VERSION (source: $SOURCE)"
        
        # Extract major.minor.patch components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        # For the first publish (0.0.1), we'll start with 0.0.1
        # For subsequent publishes, we'll bump the patch version
        # Version progression: 0.0.1 -> 0.0.2 -> 0.0.3 -> ... -> 0.1.0 -> 0.1.1 -> ...
        # This ensures automatic version progression on each master branch push
        # The workflow will automatically handle the first publish and subsequent version bumps
        # Starting from 0.0.1, each master push will create a new version automatically
        
        echo "New version will be: $NEW_VERSION"
        echo "::notice::Bumping from $LATEST_VERSION to $NEW_VERSION"
        
        # Update package.json version
        npm version $NEW_VERSION --no-git-tag-version
        
        # Verify the version was updated
        ACTUAL_VERSION=$(node -p "require('./package.json').version")
        echo "Package.json now shows version: $ACTUAL_VERSION"
        
        # Store the new version for later use
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Get new version
      id: get-version
      run: |
        NEW_VERSION=${{ env.NEW_VERSION }}
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "::notice::New version: $NEW_VERSION"
    
    - name: Build and publish to npm
      run: |
        NEW_VERSION=${{ steps.get-version.outputs.new_version }}
        echo "Publishing version $NEW_VERSION to npm"
        
        # Publish to npm
        npm publish
        
        echo "::notice::Successfully published version $NEW_VERSION to npm"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create Git tag
      run: |
        NEW_VERSION=${{ steps.get-version.outputs.new_version }}
        echo "Creating Git tag for version $NEW_VERSION"
        
        # Create and push the tag
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
        git push origin "v$NEW_VERSION"
        
        echo "::notice::Successfully created and pushed Git tag v$NEW_VERSION"
    
    - name: Commit version bump
      run: |
        NEW_VERSION=${{ steps.get-version.outputs.new_version }}
        echo "Committing version bump to $NEW_VERSION"
        
        # Add the updated package.json
        git add package.json
        
        # Commit the version bump
        git commit -m "Bump version to $NEW_VERSION [skip ci]"
        
        # Push the changes
        git push origin master
        
        echo "::notice::Successfully committed and pushed version bump to $NEW_VERSION"
